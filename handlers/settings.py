# handlers/settings.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import time as dt_time

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Settings(StatesGroup):
    waiting_time = State()
    waiting_modules = State()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —Å–ª–∞—Ç—å –±—Ä–∏—Ñ–∏–Ω–≥? (HH:MM)")
    await state.set_state(Settings.waiting_time)

@router.message(Settings.waiting_time)
async def set_time(message: Message, state: FSMContext):
    text = message.text.strip()
    import re
    if not re.fullmatch(r"[0-2]\d:[0-5]\d", text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")

    await state.update_data(time=text, modules=[])

    builder = InlineKeyboardBuilder()
    builder.button(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="module_news")
    builder.button(text="üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="module_currency")
    builder.adjust(2)
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="modules_done")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è –±—Ä–∏—Ñ–∏–Ω–≥–∞:", reply_markup=builder.as_markup())
    await state.set_state(Settings.waiting_modules)

@router.callback_query(Settings.waiting_modules, F.data.startswith("module_"))
async def toggle_module(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    modules = data.get("modules", [])
    module = callback.data.split("_", 1)[1]

    if module in modules:
        modules.remove(module)
        text = f"{module.capitalize()} –æ—Ç–∫–ª—é—á–µ–Ω"
    else:
        modules.append(module)
        text = f"{module.capitalize()} –≤–∫–ª—é—á–µ–Ω"

    await state.update_data(modules=modules)

    builder = InlineKeyboardBuilder()
    for mod, label in [("news", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"), ("currency", "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")]:
        prefix = "‚úÖ " if mod in modules else ""
        builder.button(text=prefix + label, callback_data=f"module_{mod}")
    builder.adjust(2)
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="modules_done")

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer(text)

@router.callback_query(Settings.waiting_modules, F.data == "modules_done")
async def modules_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    time_str = data.get("time")
    modules = data.get("modules", [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.time
    h, m = map(int, time_str.split(':'))
    time_obj = dt_time(hour=h, minute=m)

    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤ JSON-—Å—Ç—Ä–æ–∫—É
    import json
    modules_json = json.dumps(modules)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
    await callback.bot.db.execute(
        "UPDATE users SET notify_time = $1, modules = $2 WHERE chat_id = $3",
        time_obj, modules_json, callback.from_user.id
    )

    await callback.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await callback.answer()
    await state.clear()